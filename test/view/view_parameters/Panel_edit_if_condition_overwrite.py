#！encoding: utf-8
"""Subclass of If_Condition_Panel, which is generated by wxFormBuilder."""
import os
import wx
import yaml
import GUI_IF_Codition
import logging
from LuaProgrammingGUI.test.control.control_parameters.control_if_condition import IFConditionControl
from LuaProgrammingGUI.test.control.tools import controlfile_tools
# Implementing If_Condition_Panel
class Panel_edit_ifcondition( GUI_IF_Codition.If_Condition_Panel ):

        def __init__(self, parent, condition_data_path):

            self.ifcontrol = IFConditionControl(self, control_data_path=condition_data_path)
            self.log = logging
            GUI_IF_Codition.If_Condition_Panel.__init__( self, parent )
            controlfile_tools.log_bystatus('after init if condition panel')
            self.parent = parent
            self.control_condition_data = None
            self.showconditiontree.Bind(wx.EVT_TREE_SEL_CHANGED, self.change_tree_selection)
            self.ifcontrol.set_tree(self.showconditiontree)
            self.ifcontrol.refresh_tree()
            # self.ifcontrol.refresh_choiceboxs()

            # controlfile_tools.log_bystatus('self.showconditiontree.GetCurrentItem() is %s' % str(self.showconditiontree.GetItemPyData(self.showconditiontree.GetCurrentItem())))

        # Handlers for If_Condition_Panel events.
        def set_choose_mode( self, event ):
            # TODO: Implement set_choose_mode
            self.ifcontrol.set_choose_mode(event.EventObject)

        def add_condition( self, event ):
            # TODO: Implement add_condition
            self.ifcontrol.add_condition(event.EventObject)

        def delete_condition( self, event ):
            # TODO: Implement delete_condition
            self.ifcontrol.delete_condition(event.EventObject)

        def choose_condition( self, event ):
            # TODO: Implement choose_condition
            self.ifcontrol.choose_condition(event.EventObject)
            self.refresh_choiceboxs(event.EventObject.GetSelection(), 0, 0)

            selection_info = self.ifcontrol.get_tree_item_info(self.showconditiontree)
            if selection_info:
                select_id, condition_str, condition_value = selection_info
                new_item_str = self.m_choice_choosecondition.GetStringSelection()
                _tmp_value = {}
                _tmp_value['condition_value'] = self.ifcontrol.values[new_item_str][0]
                _tmp_value['operation_value'] = self.ifcontrol.operations[new_item_str][0]

                newitem = (new_item_str, [], _tmp_value)
                self.ifcontrol.model.items[select_id] = newitem
                self.showconditiontree.RefreshItems()
            else:
                pass


        def choose_operation( self, event ):
            # TODO: Implement choose_operation
            self.ifcontrol.choose_operation(event.EventObject)
            selection_info = self.ifcontrol.get_tree_item_info(self.showconditiontree)
            if selection_info:
                select_id, condition_str, condition_value = selection_info
                _, _, select_value = self.ifcontrol.model.items[select_id]
                select_value['operation_value'] = unicode(self.m_choice_choosecontrol.GetStringSelection())
                self.showconditiontree.RefreshItems()
            else:
                pass


        def choose_value( self, event ):
            # TODO: Implement choose_value
            self.ifcontrol.choose_value(event.EventObject)
            selection_info = self.ifcontrol.get_tree_item_info(self.showconditiontree)
            if selection_info:
                select_id, condition_str, condition_value = selection_info
                _, _, select_value = self.ifcontrol.model.items[select_id]
                select_value['condition_value'] = unicode(self.m_choice_choosevalue.GetStringSelection())
                controlfile_tools.log_bystatus('select_value is %s' % str(select_value))
                self.showconditiontree.RefreshItems()
            else:
                pass

        def change_tree_selection(self, event):
            self.ifcontrol.change_tree_selection(event.EventObject)



        def parse_value(self, value):
            if isinstance(value, list):
                self.operations = [u'等于', u'不等于']
                return [str(v) for v in value]
            elif isinstance(value, dict):
                if 'Point' in value.keys():
                    for points in value['Point']:
                        self.operations.append(u'等于%d' % points)
                    return ['P%d' % d for d in xrange(100)]
            else:
                return ['0', '1']

        def refresh_choiceboxs(self, condition_index, value_index, control_index):
            # print 'self.ifcontrol.conditions is %s' % str(self.ifcontrol.conditions)
            # print 'self.ifcontrol.operations is %s' % str(self.ifcontrol.operations)
            # print 'self.ifcontrol.values is %s' % str(self.ifcontrol.values)
            self.m_choice_choosecondition.SetItems(self.ifcontrol.conditions)
            self.m_choice_choosecondition.SetSelection(condition_index)
            self.m_choice_choosecontrol.SetItems(self.ifcontrol.operations[unicode(self.m_choice_choosecondition.GetStringSelection())])
            self.m_choice_choosevalue.SetItems(self.ifcontrol.values[unicode(self.m_choice_choosecondition.GetStringSelection())])
            self.m_choice_choosecondition.Refresh()
            self.m_choice_choosecontrol.Refresh()
            self.m_choice_choosevalue.Refresh()
            self.m_choice_choosecontrol.SetSelection(control_index)
            self.m_choice_choosevalue.SetSelection(value_index)
            controlfile_tools.log_bystatus('refresh_choiceboxs is %s' % str(self.ifcontrol.model.items))
            self.ifcontrol.refresh_tree()

if __name__ == '__main__':
    app = wx.App()
    Panel_edit_ifcondition(None).Show(True)
    app.MainLoop()